{"version":3,"sources":["Components/PublicPages/Home.js","Components/PublicPages/WhatIsMediation.js","Components/PublicPages/GetInTouch.js","Components/PublicPages/Calender.js","Components/PublicPages/ScheduleACall.js","Components/PublicPages/Login.js","Components/PrivatePages/Cases/CaseDisplay.js","Components/PrivatePages/Sessions/Session.js","Components/PrivatePages/Sessions/NewSession.js","Components/PrivatePages/UserCases/UserCase.js","Components/PrivatePages/Sessions/SessionsContainer.js","Components/PrivatePages/UserCases/UserCasesContainer.js","Components/PublicPages/YourCase.js","Components/PrivatePages/AdminHome.js","Components/PrivatePages/Leads/NewLead.js","Components/PrivatePages/Cases/NewCase.js","Components/PrivatePages/Leads/LeadDisplay.js","Components/PrivatePages/Leads/LeadEdit.js","Components/PrivatePages/Leads/Leads.js","Components/PrivatePages/Clients/ClientDisplay.js","Components/PrivatePages/Clients/ClientEdit.js","Components/PrivatePages/Clients/Clients.js","Components/PrivatePages/Cases/CaseEdit.js","Components/PrivatePages/Cases/Cases.js","Components/PrivatePages/AdminContainer.js","App.js","serviceWorker.js","index.js"],"names":["Home","Grid","columns","style","paddingLeft","paddingTop","Column","fontSize","Image","size","src","to","WhatIsMediation","rows","Row","paddingRight","GetInTouch","updateFormState","event","id","target","input","value","setState","firstName","lastName","email","phoneNumber","zipCode","createNewLead","preventDefault","data","first_name","state","last_name","phone_number","zip_code","account_type","password","fetch","method","body","JSON","stringify","then","redirect","this","textAlign","Form","padding","Field","type","onChange","Button","primary","onClick","Component","Calender","Fragment","height","width","frameborder","ScheduleACall","showCalender","secondary","Login","validate","resp","json","alert","props","setUser","CaseDisplay","currentCase","active","planned_date","substring","planned_location","confirmed_date","confirmed_location","Session","location","changeEditMode","newEditState","edit","editSession","session","updateSession","newSession","currentSession","deleteSession","removeSession","admin","NewSession","createNewSession","case_id","caseId","addSession","teamRelationship","editUserCase","planned_session_confirmed","plannedSessionConfirmed","team_relationship","currentUserCase","updateUserCase","activate","deactivate","userCase","currentClient","client","clients","filter","user_id","UserCasesContainer","userCases","map","mappedUserCase","UserCase","YourCase","yourUserId","cases","sessions","currentCaseId","currentUserCases","currentCaseClients","parseInt","cookies","get","user_cases","theCase","find","AdminHome","displayLeads","leads","lead","exact","color","Card","backgroundColor","Content","displayClients","displayCases","specificCase","getServerInfo","NewLead","lead_active","call_scheduled","callScheduled","addLead","NewCase","plannedDate","plannedLocation","createNewCase","first_client","firstClient","second_client","secondClient","addCase","console","log","paddingBottom","addToCase","LeadDisplay","currentLead","first_contact_date","second_contact_date","third_contact_date","LeadEdit","firstContactDate","firstContactStatus","secondContactDate","secondContactStatus","thirdContactDate","editLead","leadActive","first_contact_status","second_contact_status","third_contact_status","thirdContactStatus","updateLead","switchEditMode","Leads","getLead","updatedLead","upgradeToClient","removeLead","addClient","deleteLead","window","hash","ClientDisplay","currentClientCases","ClientEdit","editClient","updateClient","Clients","getClientandCases","newClient","downgradeToLead","removeClient","deleteClient","CaseEdit","confirmedDate","confirmedLocation","editCase","updateCase","Cases","getCaseAndClients","newCase","deleteCase","removeCase","AdminContainer","addedLead","newLeads","removedLead","addedClient","newClients","removedClient","newCases","newUserCases","removedCase","thisCase","path","render","withCookies","useAlert","user","set","Menu","Item","position","remove","show","Boolean","hostname","match","options","positions","TOP","timeout","offset","transition","transitions","SCALE","ReactDOM","CookiesProvider","StrictMode","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f93b40b.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Grid, Image } from 'semantic-ui-react'\n\nexport default function Home() {\n\n    return (\n        <Grid columns={2} style={{paddingLeft: 75, paddingTop: 100}}>\n            <Grid.Column style={{paddingTop: 130}}>\n                <div style={{fontSize: 75}}>\n                    Humanz Mediate\n                </div>\n                <br />\n                <br />\n                <br />\n                <div style={{fontSize: 30}}>\n                    Resolving conflict one conversation at a time\n                </div>\n            </Grid.Column>\n            <Grid.Column style={{fontSize: 30, paddingLeft: 20}}>\n                <Image size='large' src=\"https://news.stlpublicradio.org/sites/kwmu/files/styles/medium/public/201712/12047_DK_Mediation_Illus.png\" />\n                <br />\n                <br />\n                <br />\n                <div style={{paddingLeft: 50, fontSize: 40}}><NavLink to=\"/what-is-mediation\">Learn more about us </NavLink></div>\n            </Grid.Column>\n        </Grid>\n        \n    )\n      \n}\n\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Grid } from 'semantic-ui-react'\n\nfunction WhatIsMediation() {\n    return(\n        <div>\n            <Grid columns={2} rows={2} style={{paddingLeft: 75, paddingTop: 100}}>\n                <Grid.Row>\n                    <Grid.Column>\n                        <p style={{fontSize: 50}}>What is mediation? </p>\n                        <p style={{fontSize: 20, paddingTop: 15}}>\n                            Mediation is a conflict resolution process in which mediators help participants have a difficult conversation, \n                            get clear about what’s important to everyone, \n                            and make decisions that meet the needs of those involved. \n                        </p>\n                        <p style={{fontSize: 20}}>In mediation, people speak for themselves and make their own decisions.</p>\n                    </Grid.Column>\n                    <Grid.Column style={{fontSize: 15, paddingLeft: 60, paddingRight: 60}}>\n                        <p style={{fontSize: 50}}>Mediation is:</p>\n                        <p style={{fontSize: 20}}>Neutral: mediators do not take sides, and try to ensure everyone feels heard. </p>\n                        <p style={{fontSize: 20}}>Voluntary: participants agree to every step of the process. </p>\n                        <p style={{fontSize: 20}}>Confidential: mediators are bound by law to keep all conversations private. </p>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{paddingTop: 100}}>\n                    <NavLink to=\"/get-in-touch\"><p style={{fontSize: 35, paddingLeft:230}}>Get in touch with us to see if mediation is right for you!</p></NavLink>\n                </Grid.Row>\n            </Grid>\n        </div>\n    )\n}\n\nexport default WhatIsMediation","import React, { Component } from 'react'\nimport { Redirect } from 'react-router'\nimport { Button, Form } from 'semantic-ui-react'\n\nclass GetInTouch extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n          firstName: null,\n          lastName: null,\n          email: null,\n          phoneNumber: null,\n          zipCode: null,\n          redirect: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let id = event.target.id\n        let input = event.target.value\n        if (id === \"firstName\") {\n            this.setState({firstName: input})\n        } else if (id === \"lastName\") {\n            this.setState({lastName: input})\n        } else if (id === \"email\") {\n            this.setState({email: input})\n        } else if (id === \"phoneNumber\") {\n            this.setState({phoneNumber: input})\n        } else if (id === \"zipCode\") {\n            this.setState({zipCode: input})\n        }\n    }\n\n    createNewLead = (event) => {\n        event.preventDefault()\n        let data = {\n            first_name: this.state.firstName,\n            last_name: this.state.lastName,\n            email: this.state.email,\n            phone_number: this.state.phoneNumber,\n            zip_code: this.state.zipCode,\n            account_type: 1,\n            password: \"1234\"\n        }\n        fetch('http://localhost:3000/users', {\n            method: \"POST\", \n            body: JSON.stringify(data)\n        }).then(\n            this.setState({redirect: true})\n        )\n    }\n    \n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/schedule-a-call' />\n        }\n        \n        return(\n            <div>\n                <p style={{textAlign: \"center\", paddingTop: 25, fontSize: 50 }}>Get in touch!</p>\n                <Form style={{padding: \"0px 500px 0px 500px\"}}>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>First Name:</label>\n                        <input type=\"text\" id=\"firstName\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Last Name:</label>\n                        <input type=\"text\" id=\"lastName\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Email:</label>\n                        <input type=\"text\" id=\"email\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Phone Number:</label>\n                        <input type=\"number\" id=\"phoneNumber\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Zip Code:</label>\n                        <input type=\"number\" id=\"zipCode\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Button primary type=\"submit\" onClick={this.createNewLead}>Submit</Button>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default GetInTouch\n","import React from 'react';\n\nconst Calender = () => {\n  return (\n    <React.Fragment>\n      <iframe style={{ height: \"800px\" }}\n        src=\"https://calendly.com/willmharris0/consultation-call\"\n        width=\"100%\"\n        height=\"100%\"\n        frameborder=\"0\"\n      ></iframe>\n    </React.Fragment>\n  );\n};\nexport default Calender;","import React, { Component } from 'react'\nimport {NavLink} from 'react-router-dom'\nimport Calender from './Calender'\nimport { Grid, Button } from 'semantic-ui-react'\n\nclass ScheduleACall extends Component {\n\n    constructor() {\n        super()\n        this.state = {showCalender: false}\n    }\n    \n    render() {\n        return(\n            <React.Fragment>\n                {this.state.showCalender ? \n                    <Calender />\n                    :\n                    <Grid rows={3} style={{paddingLeft: 75, paddingTop: 50}}>\n                        <Grid.Row style={{paddingLeft:200}}>\n                            <p style={{fontSize: 45}}>Let us know what time works best for you!</p>\n                        </Grid.Row>\n                        <Grid.Row style={{paddingTop: 75, paddingLeft: 400}}>      \n                            <Button primary style={{fontSize: 45}} onClick={() => this.setState({showCalender: true})}>Schedule a 15-minute Call</Button>\n                        </Grid.Row>\n                        <Grid.Row style={{paddingLeft: 500, paddingTop: 100}}>\n                            <NavLink  to=\"/\" ><Button secondary style={{fontSize: 20}}>Return to Homepage</Button></NavLink>\n                        </Grid.Row>\n                    </Grid>\n                }       \n            </React.Fragment>\n        )\n    }\n}\n\nexport default ScheduleACall\n\n\n\n\n\n \n                     ","import React, { Component }  from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Button, Form } from 'semantic-ui-react'\n\nclass Login extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n          email: null,\n          password: null,\n          redirect: null\n        }\n    }\n\n    updateFormState = (event) => {\n        let id = event.target.id\n        let input = event.target.value\n        if (id === \"email\") {\n            this.setState({email: input})\n        } else if (id === \"password\") {\n            this.setState({password: input})\n        } \n    }\n\n    validate = (event) => {\n        event.preventDefault()\n        let data = {\n            email: this.state.email,\n            password: this.state.password\n        }\n        fetch('http://localhost:3000/login', {\n            method: \"POST\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => {\n                if (data === false) {\n                    alert(\"This email and password combination is incorrect \")\n                } else {\n                    this.props.setUser(data)\n                    if (data[\"account_type\"] === 0) {\n                        this.setState({redirect: \"admin\"})\n                    }\n                    if (data[\"account_type\"] === 2) {\n                        this.setState({redirect: \"your-case\"})\n                    }\n                }\n            }\n        )\n    }\n\n    render() {\n        \n        if (this.state.redirect === \"admin\"){\n            return <Redirect to=\"/admin\" />\n        }\n\n        if (this.state.redirect === \"your-case\"){\n            return <Redirect to=\"/your-case\" />\n        }\n\n        return(\n            <div>\n                <p style={{textAlign: \"center\", paddingTop: 25, fontSize: 50 }}>Login</p>\n                <Form style={{padding: \"0px 500px 0px 500px\"}}>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Email:</label>\n                        <input type=\"text\" id=\"email\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Password:</label>\n                        <input type=\"text\" id=\"password\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Button primary type=\"submit\" onClick={this.validate}>Login</Button>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Login","import React from 'react'\n\n\nfunction CaseDisplay(props) {\n\n    return(\n        <div>\n            {props.currentCase ?\n                <div>\n                    Status: {props.currentCase.active? \"Active\" : \"Inactive\"}\n                    <br /> <br />\n                    Planned date: {props.currentCase.planned_date ? props.currentCase.planned_date.substring(0, 10) : \"None\" }\n                    <br /> <br />\n                    Planned location: {props.currentCase.planned_location ? props.currentCase.planned_location : \"None\"}\n                    <br /> <br />\n                    Confirmed date: {props.currentCase.confirmed_date ? props.currentCase.confirmed_date.substring(0, 10) : \"None\" }\n                    <br /> <br />\n                    Confirmed location: {props.currentCase.confirmed_location ? props.currentCase.confirmed_location : \"None\"}\n                    <br /> <br />\n                </div>\n                :\n                null\n            }\n        </div>\n    )\n}\n\nexport default CaseDisplay","import React, { Component } from 'react'\n\nclass Session extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            currentSession: null,\n            location: null,\n            edit: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let input = event.target.value\n        this.setState({location: input})\n    }\n\n    changeEditMode = (event) => {\n        if (event) { event.preventDefault() }\n        let newEditState = !this.state.edit\n        this.setState({edit: newEditState})\n    }\n\n    editSession = (event) => {\n        event.preventDefault()\n        let data = {\n            location: this.state.location\n        }\n        fetch(`http://localhost:3000/sessions/${this.props.session.id}`, {\n            method: \"PATCH\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.updateSession(data)\n        ).then(\n            this.changeEditMode()\n        )\n    }\n\n    updateSession = (newSession) => {\n        this.setState({currentSession: newSession})\n    }\n\n    deleteSession = (event) => {\n        event.preventDefault()\n        fetch(`http://localhost:3000/sessions/${this.state.currentSession.id}`, {\n            method: \"DELETE\"\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.removeSession(data)\n\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n    \n    render() {\n        \n        return(\n            <div>\n                {this.state.edit ? \n                    <form>\n                        <label>Location:</label>\n                        <input type=\"text\" value={this.state.location} onChange={this.updateFormState}></input>\n                        <input type=\"submit\" onClick={this.editSession}></input>\n                    </form>\n                    :\n                    <div> \n                        <p>Location:</p>\n                        <p>{this.state.location}</p>\n                    </div>\n                }\n                {this.props.admin ?\n                    <div>\n                        {this.state.edit ? \n                            <button onClick={this.changeEditMode}>Display</button> \n                            : \n                            <button onClick={this.changeEditMode}>Edit</button>\n                        }\n                        <button onClick={this.deleteSession}>Delete session</button>\n                    </div>\n                    :\n                    null\n                }\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        let session = this.props.session\n        this.setState({currentSession: session, location: session.location})\n    }\n}\n\nexport default Session\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router';\n\nclass NewSession extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n          location: null,\n          caseId: null,\n          redirect: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let input = event.target.value\n        this.setState({location: input})\n       \n    }\n\n    createNewSession = (event) => {\n        event.preventDefault()\n        let data = {\n            location: this.state.location,\n            case_id: this.state.caseId\n        }\n        fetch('http://localhost:3000/sessions', {\n            method: \"POST\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.addSession(data)\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n    \n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to={`/admin/cases/#${this.state.caseId}`} />\n        }\n        \n        return(\n            <div>\n                <form>\n                    <label>Location:</label>\n                    <input type=\"text\" onChange={this.updateFormState}></input>\n                    <input type=\"submit\" onClick={this.createNewSession}></input>\n                </form>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.setState({caseId: this.props.id})\n    }\n\n}\n\nexport default NewSession","import React, { Component } from 'react'\nimport {  NavLink} from 'react-router-dom'\n\nclass Session extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            currentUserCase: null,\n            currentClient: null, \n            plannedSessionConfirmed: null,\n            teamRelationship: null,\n            edit: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let input = event.target.value\n        this.setState({teamRelationship: input})\n    }\n\n    changeEditMode = (event) => {\n        if (event) { event.preventDefault() }\n        let newEditState = !this.state.edit\n        this.setState({edit: newEditState})\n    }\n\n    editUserCase = (event) => {\n        event.preventDefault()\n        let data = {\n            planned_session_confirmed: this.state.plannedSessionConfirmed,\n            team_relationship: this.state.teamRelationship\n        }\n        fetch(`http://localhost:3000/user_cases/${this.state.currentUserCase.id}`, {\n            method: \"PATCH\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.updateUserCase(data)\n        ).then(\n            this.changeEditMode()\n        )\n    }\n\n    activate = () => {\n        this.setState({plannedSessionConfirmed: true})\n    }\n\n    deactivate = () => {\n        this.setState({plannedSessionConfirmed: false})\n    }\n\n    updateUserCase = (userCase) => {\n        this.setState({currentUserCase: userCase})\n    }\n\n   \n    render() {\n        \n        return(\n            <div>\n                {this.state.edit ? \n                    <div>\n                        <form>\n                            {this.state.plannedSessionConfirmed ? \n                                <label>Not confirmed:</label>\n                                :\n                                <label>Confirmed:</label>\n                            }\n                            {this.state.plannedSessionConfirmed ? \n                                <input type=\"checkbox\" onChange={this.deactivate}></input>\n                                :\n                                <input type=\"checkbox\" onChange={this.activate}></input>\n                            }\n                            <label>Relationship:</label>\n                            <input type=\"text\" value={this.state.teamRelationship} onChange={this.updateFormState}></input>\n                            <input type=\"submit\" onClick={this.editUserCase}></input>\n                        </form>\n                    </div>\n                    :\n                    <div> \n                        {this.state.currentUserCase ?\n                            <div>\n                                <NavLink to={`/admin/clients/#${this.state.currentClient.id}`}><p>{this.state.currentClient.first_name} {this.state.currentClient.last_name}</p></NavLink>\n                                <p>Next Session Confirmed: {this.state.plannedSessionConfirmed ? \"Yes\" : \"No\"}</p>\n                                {this.props.admin ? \n                                    <p>Relationship: {this.state.teamRelationship}</p>\n                                    :\n                                    null\n                                }\n                            </div>\n                            :\n                            null\n                        }\n                    </div>\n                }\n                {this.props.admin ?\n                    <div>\n                        {this.state.edit ? \n                            <button onClick={this.changeEditMode}>Display</button> \n                            : \n                            <button onClick={this.changeEditMode}>Edit</button>\n                        }\n                    </div>\n                    :\n                    null\n                }\n\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        let userCase = this.props.userCase\n        let client = this.props.clients.filter(client => client.id === userCase.user_id)[0]\n        this.setState({\n            currentUserCase: userCase, \n            currentClient: client,\n            plannedSessionConfirmed: userCase.planned_session_confirmed,\n            teamRelationship: userCase.team_relationship\n        })\n    }\n\n}\n\nexport default Session\n","import React, { Component } from 'react'\nimport { Route, NavLink } from 'react-router-dom'\nimport Session from './Session.js'\nimport NewSession from './NewSession.js'\n\n\nclass SessionsContainer extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            caseSessions: null\n        }\n    }\n\n    addSession = (addedSession) => {\n        let newSessions = [...this.state.caseSessions, addedSession]\n        this.setState({caseSessions: newSessions})\n    }\n\n    removeSession = (removedSession) => {\n        let newSessions = this.state.caseSessions.filter(session => session.id !== removedSession.id)\n        this.setState({caseSessions: newSessions})\n    }\n\n    displayAllSessions = () => {\n        return( \n            <div>\n                {this.props.admin ?\n                    <NavLink to={`/admin/cases/${this.props.id}/new-session`}>Add a New Session</NavLink>\n                    :\n                    null\n                }\n                {this.state.caseSessions ? \n                    this.state.caseSessions.map(theSession => <Session admin={this.props.admin} session={theSession} removeSession = {this.removeSession} /> ) \n                    : \n                    null\n                }\n            </div>\n        )\n    }\n\n    render() {\n        return(\n            <div>\n                <Route exact path={`/admin/cases/${this.props.id}/new-session`} render={() => <NewSession id ={this.props.id} addSession={this.addSession}/>} />\n                <Route path={`/`} render={this.displayAllSessions} /> \n            </div>\n        )\n    }\n\n    componentDidMount() {\n        let sessions = this.props.sessions.filter(session => session.case_id === this.props.id)\n        this.setState({caseSessions: sessions})\n    }\n}\n\nexport default SessionsContainer\n\n","import React, { Component } from 'react'\nimport UserCase from './UserCase.js'\n\n\n\nclass UserCasesContainer extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            userCases: null\n        }\n    }\n\n    render() {\n        return(\n            <div>\n               {this.state.userCases ? \n                    this.state.userCases.map(mappedUserCase => <UserCase admin={this.props.admin} userCase={mappedUserCase} clients={this.props.clients} />) \n                    : \n                    null\n                }\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        let userCases = this.props.userCases.filter(userCase => userCase.case_id === this.props.id)\n        this.setState({userCases: userCases})\n    }\n}\n\nexport default UserCasesContainer\n\n","import React, { Component } from 'react'\nimport CaseDisplay from '../PrivatePages/Cases/CaseDisplay.js'\nimport SessionsContainer from '../PrivatePages/Sessions/SessionsContainer.js'\nimport UserCasesContainer from '../PrivatePages/UserCases/UserCasesContainer.js'\n\n\nclass YourCase extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            yourUserId: null,\n            cases: null,\n            clients: null,\n            userCases: null,\n            sessions: null,\n            currentCaseId: null,\n            currentCase: null,\n            currentUserCases: null,\n            currentCaseClients: null,\n            admin: false\n        }\n    }\n   \n    render() {\n        return(\n            <div style={{padding: \"0px 0px 0px 500px\", fontSize: 25}}>\n                {this.state.cases ?\n                    <CaseDisplay currentCase={this.state.currentCase} currentUserCases={this.state.currentUserCases} currentCaseClients={this.state.currentCaseClients}/>\n                    :\n                    null\n                }\n                <br />\n                <br />\n                <p>Participants:</p>\n                {this.state.cases ?\n                    <UserCasesContainer admin={this.state.admin} clients={this.state.clients} userCases={this.state.userCases} id={this.state.currentCaseId} />\n                    :\n                    null\n                }\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        fetch(\n            'http://localhost:3000/info'\n        ).then(\n            resp => resp.json()\n        ).then(\n            data => {\n                let yourUserId = parseInt(this.props.cookies.get('id'))\n                let cases = data.cases\n                let clients = data.clients\n                let userCases = data.user_cases\n                let sessions = data.sessions\n                let currentCaseId = userCases.filter(userCase => userCase.user_id === yourUserId)[0].case_id\n                let currentCase = cases.filter(theCase => theCase.id === currentCaseId)[0]\n                let currentUserCases = userCases.filter(userCase => userCase.case_id === currentCaseId)\n                let currentCaseClients = currentUserCases.map(userCase => clients.find(client => client.id === userCase.user_id))\n                this.setState({\n                    yourUserId: yourUserId,\n                    cases: cases,\n                    clients: clients,\n                    userCases: userCases,\n                    sessions: sessions,\n                    currentCaseId: currentCaseId,\n                    currentCase: currentCase,\n                    currentUserCases: currentUserCases,\n                    currentCaseClients: currentCaseClients\n                })\n            }\n        )\n    }\n    \n}\n\nexport default YourCase\n \n                   ","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Grid, Button, Card } from 'semantic-ui-react'\n\nclass AdminHome extends Component {\n    \n    displayLeads = () => {\n        return (\n            <div> \n                {this.props.leads.map(lead => {\n                    return (\n                        <NavLink to={`/admin/leads/#${lead.id}`} exact style={{color: \"white\"}}>\n                            <Card style={{fontSize: 20, backgroundColor: \"teal\"}}>\n                                <Card.Content>{lead.first_name} {lead.last_name}</Card.Content>\n                            </Card>\n                        </NavLink> \n                    )\n                })}\n            </div>\n        )\n    }\n\n    displayClients = () => {\n        return (\n            <div> \n                {this.props.clients.map(client => {\n                    return (\n                        <NavLink to={`/admin/clients/#${client.id}`} exact style={{color: \"white\"}}>\n                            <Card style={{fontSize: 20, backgroundColor: \"teal\"}}>\n                                <Card.Content>{client.first_name} {client.last_name}</Card.Content>\n                            </Card>\n                        </NavLink> \n                    )\n                })}\n            </div>\n        )\n    }\n\n    displayCases = () => {\n        return (\n            <div> \n                {this.props.cases.map(specificCase => {\n                    return (\n                        <NavLink to={`/admin/cases/#${specificCase.id}`} exact style={{color: \"white\"}}> \n                            <Card style={{fontSize: 20, backgroundColor: \"teal\"}}>\n                                <Card.Content>\n                                    {specificCase.planned_location} \n                                    <br />\n                                    {specificCase.planned_date ? specificCase.planned_date.substring(0, 10) : null} \n                                </Card.Content>\n                            </Card>\n                        </NavLink> \n                    )\n                })}\n            </div>\n        )\n    }\n\n    render() {\n        return(\n            <Grid columns={3} rows={3} style={{paddingLeft: 75, paddingTop: 25}}>\n                <Grid.Row>\n                    <Grid.Column>\n                        <NavLink to={`/admin/new-lead`} exact><Button primary style={{fontSize: 25}}>Add a new lead</Button></NavLink>\n                    </Grid.Column>\n                    <Grid.Column></Grid.Column>\n                    <Grid.Column style={{paddingLeft: 0}}>\n                        <NavLink to={`/admin/new-case`} exact><Button primary style={{fontSize: 25}}>Add a new case</Button></NavLink>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column>\n                        <div style={{fontSize: 30}}>Leads</div>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <div style={{fontSize: 30}}>Clients</div>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <div style={{fontSize: 30}}>Cases</div>\n                    </Grid.Column>\n                </Grid.Row>\n               <Grid.Row>\n                   <Grid.Column> \n                       {this.props.leads ? this.displayLeads() : null}\n                    </Grid.Column>\n                    <Grid.Column>\n                        {this.props.clients ? this.displayClients() : null}\n                    </Grid.Column>\n                    <Grid.Column>\n                        {this.props.cases ? this.displayCases() : null}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n    componentDidMount() {\n        this.props.getServerInfo()\n    }\n}\n\nexport default AdminHome\n\n ","import React, { Component } from 'react'\nimport { Redirect } from 'react-router'\nimport { Button, Form } from 'semantic-ui-react'\n\nclass NewLead extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n          firstName: null,\n          lastName: null,\n          email: null,\n          phoneNumber: null,\n          zipCode: null,\n          callScheduled: false,\n          redirect: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let id = event.target.id\n        let input = event.target.value\n        if (id === \"firstName\") {\n            this.setState({firstName: input})\n        } else if (id === \"lastName\") {\n            this.setState({lastName: input})\n        } else if (id === \"email\") {\n            this.setState({email: input})\n        } else if (id === \"phoneNumber\") {\n            this.setState({phoneNumber: input})\n        } else if (id === \"zipCode\") {\n            this.setState({zipCode: input})\n        }\n    }\n\n    createNewLead = (event) => {\n        event.preventDefault()\n        let data = {\n            first_name: this.state.firstName,\n            last_name: this.state.lastName,\n            lead_active: true,\n            email: this.state.email,\n            account_type: 1,\n            phone_number: this.state.phoneNumber,\n            zip_code: this.state.zipCode,\n            call_scheduled: this.state.callScheduled,\n            password: \"1234\"\n        }\n        fetch('http://localhost:3000/users', {\n            method: \"POST\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.addLead(data)\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n\n    callScheduled = () => {\n        this.setState({callScheduled: true})\n    }\n    \n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div>\n                <p style={{textAlign: \"center\", paddingTop: 25, fontSize: 50 }}>Create a new lead</p>\n                <Form style={{padding: \"0px 500px 0px 500px\"}}>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>First Name:</label>\n                        <input type=\"text\" id=\"firstName\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Last Name:</label>\n                        <input type=\"text\" id=\"lastName\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Email:</label>\n                        <input type=\"text\" id=\"email\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Phone Number:</label>\n                        <input type=\"number\" id=\"phoneNumber\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Zip Code:</label>\n                        <input type=\"number\" id=\"zipCode\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Button primary type=\"submit\" onClick={this.createNewLead}>Submit</Button>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default NewLead\n\n\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router'\nimport { Button, Form, Grid, Card } from 'semantic-ui-react'\n\nclass NewCase extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            plannedDate: null,\n            plannedLocation: null,\n            firstClient: null,\n            secondClient: null,\n            redirect: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let id = event.target.id\n        let input = event.target.value\n        if (id === \"plannedDate\") {\n            this.setState({plannedDate: input})\n        } else if (id === \"plannedLocation\") {\n            this.setState({plannedLocation: input})\n        }\n    }\n\n    createNewCase = (event) => {\n        event.preventDefault()\n        let data = {\n            planned_date: this.state.plannedDate,\n            planned_location: this.state.plannedLocation,\n            first_client: this.state.firstClient,\n            second_client: this.state.secondClient\n        }\n        fetch('http://localhost:3000/cases', {\n            method: \"POST\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.addCase(data)\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n\n    addToCase(client) {\n        console.log('working')\n        if (!this.state.firstClient) {\n            this.setState({firstClient: client})\n        } else if (!this.state.secondClient) {\n            this.setState({secondClient: client})\n        }\n    }\n    \n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div>\n                <p style={{textAlign: \"center\", paddingTop: 0, fontSize: 40 }}>Create a new case</p>\n                <Form style={{padding: \"0px 500px 0px 500px\"}}>\n                    <Form.Field>\n                        <label style={{fontSize: 20}}>Planned Date:</label>\n                        <input type=\"date\" id=\"plannedDate\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Form.Field>\n                    <label style={{fontSize: 20}}>Planned Location:</label>\n                    <input type=\"text\" id=\"plannedLocation\" onChange={this.updateFormState}></input>\n                    </Form.Field>\n                    <Button primary type=\"submit\" onClick={this.createNewCase}>Submit</Button>\n                </Form>\n                <Grid columns={2} rows={2} style={{paddingLeft: 200, paddingTop: 25}}>\n                    <Grid.Column>\n                        <Grid.Row>\n                            <p style={{fontSize: 40, paddingBottom: 25}}>Clients </p>\n                        </Grid.Row>\n                        <Grid.Row>\n                            {this.props.clients.map(client => {\n                                return( \n                                    <Card style={{fontSize: 20, backgroundColor: \"teal\", color: \"white\"}} onClick={() => this.addToCase(client)}>\n                                        <Card.Content>{client.first_name} {client.last_name}</Card.Content>\n                                    </Card>\n                                )\n                            })}\n                        </Grid.Row>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Grid.Row>\n                            <p style={{fontSize: 40, paddingBottom: 25}}>Participants</p>\n                        </Grid.Row>\n                        <Grid.Row style={{paddingBottom: 25}}>\n                            {this.state.firstClient ?\n                                <Card style={{fontSize: 20, backgroundColor: \"teal\", color: \"white\"}}>\n                                    <Card.Content>\n                                        {this.state.firstClient.first_name} { this.state.firstClient.last_name}\n                                    </Card.Content>\n                                </Card>\n                                :\n                                null\n                            }\n                        </Grid.Row>\n                        <Grid.Row>\n                            {this.state.secondClient ?\n                                <Card style={{fontSize: 20, backgroundColor: \"teal\", color: \"white\"}}>\n                                    <Card.Content>\n                                        {this.state.secondClient.first_name} {this.state.secondClient.last_name}\n                                    </Card.Content>\n                                </Card>\n                                :\n                                null\n                            }\n                        </Grid.Row>\n                    </Grid.Column>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default NewCase\n","import React from 'react'\n \n\nfunction LeadDisplay(props) {\n    return(\n        <div >\n            {props.currentLead ? \n                <div>\n                    {props.currentLead.first_name} {props.currentLead.last_name}\n                    <br /> <br /> \n                    Status: {props.currentLead.lead_active ? \"Active\" : \"Inactive\"}\n                    <br /> <br /> \n                    Email: {props.currentLead.email}\n                    <br /> <br /> \n                    Phone number: {props.currentLead.phone_number}\n                    <br /> <br /> \n                    Zip code: {props.currentLead.zip_code}\n                    <br /> <br /> \n                    Call scheduled? {props.currentLead.call_scheduled? \"Yes\" : \"No\"}\n                    <br /> <br /> \n                    First Contact Date: {props.currentLead.first_contact_date ? props.currentLead.first_contact_date.substring(0, 10) : \"None\"}\n                    <br /> <br /> \n                    Second Contact Date: {props.currentLead.second_contact_date ? props.currentLead.second_contact_date.substring(0, 10) : \"None\"}\n                    <br /> <br /> \n                    Third Contact Date: {props.currentLead.third_contact_date ? props.currentLead.third_contact_date.substring(0, 10) : \"None\"}\n                  \n                   \n                </div>\n                :\n                null\n            }\n        </div>\n    )\n}\n\nexport default LeadDisplay","import React, { Component } from 'react'\nimport { Redirect } from 'react-router';\n \n\nclass LeadEdit extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n          firstName: null,\n          lastName: null,\n          leadActive: null,\n          email: null,\n          phoneNumber: null,\n          zipCode: null,\n          callScheduled: null,\n          firstContactDate: null,\n          firstContactStatus: null,\n          secondContactDate: null,\n          secondContactStatus: null,\n          thirdContactDate: null,\n          thirdContactStatus:null,\n          redirect: false\n        }\n    }\n\n    updateFormState = (event) => {\n        debugger\n        let id = event.target.id\n        let input = event.target.value\n        if (id === \"firstName\") {\n            this.setState({firstName: input})\n        } else if (id === \"lastName\") {\n            this.setState({lastName: input})\n        } else if (id === \"email\") {\n            this.setState({email: input})\n        } else if (id === \"phoneNumber\") {\n            this.setState({phoneNumber: input})\n        } else if (id === \"zipCode\") {\n            this.setState({zipCode: input})\n        } else if (id === \"callScheduled\") {\n            this.setState({callScheduled: input})\n        } else if (id === \"firstContactDate\") {\n            this.setState({firstContactDate: input})\n        } else if (id === \"firstContactStatus\") {\n            this.setState({firstContactStatus: input})\n        } else if (id === \"secondContactDate\") {\n            this.setState({secondContactDate: input})\n        } else if (id === \"secondContactStatus\") {\n            this.setState({secondContactStatus: input})\n        } else if (id === \"thirdContactDate\") {\n            this.setState({thirdContactDate: input})\n        } else if (id === \"thirdContactStatus\") {\n            this.setState({firstContactDate: input})\n        }\n    }\n\n    editLead = (event) => {\n        event.preventDefault()\n        let data = {\n            first_name: this.state.firstName,\n            last_name: this.state.lastName,\n            lead_active: this.state.leadActive,\n            email: this.state.email,\n            phone_number: this.state.phoneNumber,\n            zip_code: this.state.zipCode,\n            call_scheduled: this.state.callScheduled,\n            first_contact_date: this.state.firstContactDate,\n            first_contact_status: this.state.firstContactStatus,\n            second_contact_date: this.state.secondContactDate,\n            second_contact_status: this.state.secondContactStatus,\n            third_contact_date: this.state.thirdContactDate,\n            third_contact_status: this.state.thirdContactStatus\n        }\n        fetch(`http://localhost:3000/users/${this.props.currentLead.id}`, {\n            method: \"PATCH\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.updateLead(data)\n        ).then(\n            this.props.switchEditMode()\n        )\n    }\n\n    activate = () => {\n        this.setState({leadActive: true})\n    }\n\n    deactivate = () => {\n        this.setState({leadActive: false})\n    }\n    \n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div>\n                <form>\n                    <label>First Name:</label>\n                    <input type=\"text\" id=\"firstName\" value={this.state.firstName} onChange={this.updateFormState}></input>\n                    <br /> <br /> \n                    <label>Last Name:</label>\n                    <input type=\"text\" id=\"lastName\" value={this.state.lastName} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    {this.props.currentLead.lead_active ? \n                        <label>Deactivate:</label>\n                        :\n                        <label>Activate:</label>\n                    }\n                    {this.props.currentLead.lead_active ? \n                        <input type=\"checkbox\" onChange={this.deactivate}></input>\n                        :\n                        <input type=\"checkbox\" onChange={this.activate}></input>\n                    }\n                    <br /> <br />\n                    <label>Email:</label>\n                    <input type=\"text\" id=\"email\" value={this.state.email} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Phone Number:</label>\n                    <input type=\"number\" id=\"phoneNumber\" value={this.state.phoneNumber} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Zip Code:</label>\n                    <input type=\"number\" id=\"zipCode\" value={this.state.zipCode} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>First Contact Date:</label>\n                    <input type=\"date\" id=\"firstContactDate\" value={this.state.firstContactDate} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Second Contact Date:</label>\n                    <input type=\"date\" id=\"secondContactDate\" value={this.state.secondContactDate} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Third Contact Date:</label>\n                    <input type=\"date\" id=\"thirdContactDate\" value={this.state.thirdContactDate} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <input type=\"submit\" onClick={this.editLead}></input>\n                </form>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        let lead = this.props.currentLead\n        debugger\n        this.setState({\n            firstName: lead.first_name, \n            lastName: lead.last_name, \n            leadActive: lead.lead_active,\n            email: lead.email,\n            phoneNumber: lead.phone_number,\n            zipCode: lead.zip_code,\n            callScheduled: lead.call_scheduled,\n            firstContactDate: lead.first_contact_date,\n            firstContactStatus: lead.first_contact_status,\n            secondContactDate: lead.second_contact_date,\n            secondContactStatus: lead.second_contact_status,\n            thirdContactDate: lead.third_contact_date,\n            thirdContactStatus: lead.third_contact_status\n        })\n    }\n}\n\nexport default LeadEdit\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router'\nimport LeadDisplay from './LeadDisplay.js'\nimport LeadEdit from './LeadEdit.js'\n \n\nclass Leads extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            id: parseInt(window.location.hash.substring(1)),\n            currentLead: null,\n            edit: false,\n            redirect: false\n        }\n    }\n\n    getLead = () => {\n        let lead = this.props.leads.filter(lead => lead.id === this.state.id)[0]\n        this.setState({currentLead: lead})\n    }\n\n    updateLead = (updatedLead) => {\n        this.setState({currentLead: updatedLead})\n    }\n\n    upgradeToClient = (event) => {\n        event.preventDefault()\n        let data = {account_type: 2}\n        fetch(`http://localhost:3000/users/${this.state.id}`, {\n            method: \"PATCH\",\n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => {\n                this.props.removeLead(data)\n                this.props.addClient(data)\n            }\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n\n    deleteLead = (event) => {\n        event.preventDefault()\n        fetch(`http://localhost:3000/users/${this.state.id}`, {\n            method: \"DELETE\"\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.removeLead(data)\n\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n\n    switchEditMode = (event) => {\n        if (event) { event.preventDefault() }\n        let newEditState = !this.state.edit\n        this.setState({edit: newEditState})\n    }\n\n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div style={{padding: \"50px 0px 0px 500px\", fontSize: 25}}>\n                {this.state.edit ? \n                    <LeadEdit currentLead={this.state.currentLead} switchEditMode={this.switchEditMode} updateLead={this.updateLead} /> \n                    : \n                    <LeadDisplay currentLead={this.state.currentLead}/>\n                }\n                <br />\n                {this.state.edit ? \n                    <button secondary onClick={this.switchEditMode}>Display</button> \n                    : \n                    <button secondary onClick={this.switchEditMode}>Edit</button>\n                }\n                <button secondary onClick={this.upgradeToClient}>Upgrade to client</button>\n                <button secondary onClick={this.deleteLead}>Delete lead</button>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.getLead()\n    }\n}\n\nexport default Leads\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nfunction ClientDisplay(props) {\n    return(\n        <div>\n            {props.currentClient ?\n                <div>\n                    {props.currentClient.first_name} {props.currentClient.last_name}\n                    <br /> <br />\n                    Email: {props.currentClient.email}\n                    <br /> <br />\n                    Phone number: {props.currentClient.phone_number}\n                    <br /> <br />\n                    Zip code: {props.currentClient.zip_code}\n                    <br /> <br />\n                    Cases:\n                    <br /> <br />\n                    {props.currentClientCases.map(theCase => <NavLink to={`/admin/cases/#${theCase.id}`}>{theCase.planned_location}</NavLink>) }\n                </div>\n                :\n                null\n            }\n        </div>\n    )\n}\n\nexport default ClientDisplay","import React, { Component } from 'react'\nimport { Redirect } from 'react-router';\n\nclass ClientEdit extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n          firstName: null,\n          lastName: null,\n          email: null,\n          phoneNumber: null,\n          zipCode: null,\n          redirect: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let id = event.target.id\n        let input = event.target.value\n        if (id === \"firstName\") {\n            this.setState({firstName: input})\n        } else if (id === \"lastName\") {\n            this.setState({lastName: input})\n        } else if (id === \"email\") {\n            this.setState({email: input})\n        } else if (id === \"phoneNumber\") {\n            this.setState({phoneNumber: input})\n        } else if (id === \"zipCode\") {\n            this.setState({zipCode: input})\n        }  \n    }\n\n    editClient = (event) => {\n        event.preventDefault()\n        let data = {\n            first_name: this.state.firstName,\n            last_name: this.state.lastName,\n            email: this.state.email,\n            phone_number: this.state.phoneNumber,\n            zip_code: this.state.zipCode \n        }\n        fetch(`http://localhost:3000/users/${this.props.currentClient.id}`, {\n            method: \"PATCH\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.updateClient(data)\n        ).then(\n            this.props.changeEditMode()\n        )\n    }\n    \n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div>\n                <form>\n                    <label>First Name:</label>\n                    <input type=\"text\" id=\"firstName\" value={this.state.firstName} onChange={this.updateFormState}></input>\n                    <label>Last Name:</label>\n                    <input type=\"text\" id=\"lastName\" value={this.state.lastName} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Email:</label>\n                    <input type=\"text\" id=\"email\" value={this.state.email} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Phone Number:</label>\n                    <input type=\"number\" id=\"phoneNumber\" value={this.state.phoneNumber} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Zip Code:</label>\n                    <input type=\"number\" id=\"zipCode\" value={this.state.zipCode} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <input type=\"submit\" onClick={this.editClient}></input>\n                </form>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        let client = this.props.currentClient\n        this.setState({\n            firstName: client.first_name, \n            lastName: client.last_name, \n            email: client.email,\n            phoneNumber: client.phone_number,\n            zipCode: client.zip_code \n        })\n    }\n}\n\nexport default ClientEdit\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router'\nimport ClientDisplay from './ClientDisplay.js'\nimport ClientEdit from './ClientEdit.js'\n\nclass Clients extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            id: parseInt(window.location.hash.substring(1)),\n            currentClient: null,\n            currentClientCases: null,\n            edit: false,\n            redirect: false\n        }\n    }\n\n    getClientandCases = () => {\n        let client = this.props.clients.filter(client => client.id === this.state.id)[0]\n        let userCases = this.props.userCases.filter(userCase => userCase.user_id === client.id)\n        let cases = userCases.map(userCase => this.props.cases.find(theCase => theCase.id === userCase.case_id))\n        this.setState({currentClient: client, currentClientCases: cases})\n    }\n\n    updateClient = (newClient) => {\n        this.setState({currentClient: newClient})\n    }\n\n    downgradeToLead = (event) => {\n        event.preventDefault()\n        let data = {account_type: 1}\n        fetch(`http://localhost:3000/users/${this.state.id}`, {\n            method: \"PATCH\",\n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => {\n                this.props.addLead(data)\n                this.props.removeClient(data)\n            }\n        ).then(\n            () => this.setState({redirect: true})\n        )\n    }\n\n    deleteClient = (event) => {\n        event.preventDefault()\n        fetch(`http://localhost:3000/users/${this.state.id}`, {\n            method: \"DELETE\"\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.removeClient(data)\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n\n    changeEditMode = (event) => {\n        if (event) { event.preventDefault() }\n        let newEditState = !this.state.edit\n        this.setState({edit: newEditState})\n    }\n\n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div style={{padding: \"50px 0px 0px 500px\", fontSize: 25}}>\n                {this.state.edit ? \n                    <ClientEdit currentClient={this.state.currentClient} changeEditMode={this.changeEditMode} updateClient={this.updateClient} /> \n                    : \n                    <ClientDisplay currentClient={this.state.currentClient} currentClientCases={this.state.currentClientCases}/>\n                }\n                <br /> \n                {this.state.edit ? \n                    <button onClick={this.changeEditMode}>Display</button> \n                    : \n                    <button onClick={this.changeEditMode}>Edit</button>\n                }\n                <button onClick={this.downgradeToLead}>Downgrad to lead</button>\n                <button onClick={this.deleteClient}>Delete client</button>\n            </div>\n        )\n        \n    }\n\n    componentDidMount() {\n        this.getClientandCases()\n    }\n}\n\nexport default Clients\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router';\n\nclass CaseEdit extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            active: null,\n            plannedDate: null,\n            plannedLocation: null,\n            confirmedDate: null,\n            confirmedLocation: null,\n            redirect: false\n        }\n    }\n\n    updateFormState = (event) => {\n        let id = event.target.id\n        let input = event.target.value\n        if (id === \"plannedDate\") {\n            this.setState({plannedDate: input})\n        } else if (id === \"plannedLocation\") {\n            this.setState({plannedLocation: input})\n        } else if (id === \"confirmedDate\") {\n            this.setState({confirmedDate: input})\n        } else if (id === \"confirmedLocation\") {\n            this.setState({confirmedLocation: input})\n        }\n    }\n\n    editCase = (event) => {\n        event.preventDefault()\n        let data = {\n            active: this.state.active,\n            planned_date: this.state.plannedDate,\n            planned_location: this.state.plannedLocation,\n            confirmed_date: this.state.confirmedDate,\n            confirmed_location: this.state.confirmedLocation\n        }\n        fetch(`http://localhost:3000/cases/${this.props.currentCase.id}`, {\n            method: \"PATCH\", \n            body: JSON.stringify(data)\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.updateCase(data)\n        ).then(\n            this.props.changeEditMode()\n        )\n    }\n\n    activate = () => {\n        this.setState({active: true})\n    }\n\n    deactivate = () => {\n        this.setState({active: false})\n    }\n    \n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div>\n                <form>\n                    {this.props.currentCase.active ? \n                        <label>Deactivate:</label>\n                        :\n                        <label>Activate:</label>\n                    }\n                    {this.props.currentCase.active ? \n                        <input type=\"checkbox\" onChange={this.deactivate}></input>\n                        :\n                        <input type=\"checkbox\" onChange={this.activate}></input>\n                    }\n                    <br /> <br />\n                    <label>Planned Date: {this.state.plannedDate ? this.state.plannedDate.substring(0, 10) : null} </label>\n                    <input type=\"date\" id=\"plannedDate\" onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Planned Location:</label>\n                    <input type=\"text\" id=\"plannedLocation\" value={this.state.plannedLocation} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Confirmed Date: {this.state.confirmedDate ? this.state.confirmedDate.substring(0, 10) : null} </label>\n                    <input type=\"date\" id=\"confirmedDate\" onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <label>Confirmed Location:</label>\n                    <input type=\"text\" id=\"confirmedLocation\" value={this.state.confirmedLocation} onChange={this.updateFormState}></input>\n                    <br /> <br />\n                    <input type=\"submit\" onClick={this.editCase}></input>\n                </form>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        let currentCase = this.props.currentCase\n        this.setState({\n            active: currentCase.active,\n            plannedDate: currentCase.planned_date,\n            plannedLocation: currentCase.planned_location,\n            confirmedDate: currentCase.confirmed_date,\n            confirmedLocation: currentCase.confirmed_location\n        })\n    }\n}\n\nexport default CaseEdit\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router';\nimport CaseDisplay from './CaseDisplay.js'\nimport CaseEdit from './CaseEdit.js'\nimport SessionsContainer from '../Sessions/SessionsContainer.js'\nimport UserCasesContainer from '../UserCases/UserCasesContainer.js'\n\nclass Cases extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            id: parseInt(window.location.hash.substring(1)),\n            currentCase: null,\n            currentUserCases: null,\n            currentCaseClients: null,\n            edit: false,\n            redirect: false,\n            admin: true\n        }\n    }\n\n    getCaseAndClients = () => {\n        let theCase = this.props.cases.filter(theCase => theCase.id === this.state.id)[0]\n        let userCases = this.props.userCases.filter(userCase => userCase.case_id === theCase.id)\n        let clients = userCases.map(userCase => this.props.clients.find(client => client.id === userCase.user_id))\n        this.setState({currentCase: theCase, currentUserCases: userCases, currentCaseClients: clients})\n    }\n\n    updateCase = (newCase) => {\n        this.setState({currentCase: newCase})\n    }\n\n    deleteCase = (event) => {\n        event.preventDefault()\n        fetch(`http://localhost:3000/cases/${this.state.id}`, {\n            method: \"DELETE\"\n        }).then(\n            resp => resp.json()\n        ).then(\n            data => this.props.removeCase(data)\n\n        ).then(\n            this.setState({redirect: true})\n        )\n    }\n\n    changeEditMode = (event) => {\n        if (event) { event.preventDefault() }\n        let newEditState = !this.state.edit\n        this.setState({edit: newEditState})\n    }\n\n    render() {\n        \n        if (this.state.redirect === true) {\n            return <Redirect to='/admin' />\n        }\n        \n        return(\n            <div style={{padding: \"0px 0px 0px 500px\", fontSize: 25}}>\n                {this.state.edit ? \n                    <CaseEdit currentCase={this.state.currentCase} changeEditMode={this.changeEditMode} updateCase={this.updateCase} /> \n                    : \n                    <CaseDisplay currentCase={this.state.currentCase} currentUserCases={this.state.currentUserCases} currentCaseClients={this.state.currentCaseClients}/>\n                }\n                <br />\n                {this.state.edit ? \n                    <button onClick={this.changeEditMode}>Display</button> \n                    : \n                    <button onClick={this.changeEditMode}>Edit</button>\n                }\n                <button onClick={this.deleteCase}>Delete case</button>\n                <br />\n                <br />\n                <p>Clients:</p>\n                <UserCasesContainer admin={this.state.admin} clients={this.props.clients} userCases={this.props.userCases} id={this.state.id} />\n                \n            </div>\n        )\n        \n    }\n\n    componentDidMount() {\n        this.getCaseAndClients()\n    }\n}\n\nexport default Cases\n","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport AdminHome from \"./AdminHome.js\"\nimport NewLead from \"./Leads/NewLead.js\"\nimport NewCase from \"./Cases/NewCase.js\"\nimport Leads from \"./Leads/Leads.js\"\nimport Clients from \"./Clients/Clients.js\"\nimport Cases from \"./Cases/Cases.js\"\n\n\nclass AdminContainer extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n          leads: null,\n          clients: null,\n          cases: null,\n          sessions: null,\n          userCases: null\n        }\n    }\n\n    getServerInfo = () => {\n        fetch('http://localhost:3000/info').then(\n            resp => resp.json()\n        ).then(\n            data => {\n                this.setState({\n                    leads: data.leads, \n                    clients: data.clients, \n                    cases: data.cases, \n                    sessions: data.sessions,\n                    userCases: data.user_cases\n                })\n            }\n        )\n    }\n\n    addLead = (addedLead) => {\n        let newLeads = [...this.state.leads, addedLead]\n        this.setState({leads: newLeads})\n    }\n\n    removeLead = (removedLead) => {\n        let newLeads = this.state.leads.filter(lead => lead.id !== removedLead.id)\n        this.setState({leads: newLeads})\n    }\n\n    addClient = (addedClient) => {\n        let newClients = [...this.state.clients, addedClient]\n        this.setState({clients: newClients})\n    }\n\n    removeClient = (removedClient) => {\n        let newClients = this.state.clients.filter(client => client.id !== removedClient.id)\n        this.setState({clients: newClients})\n    }\n\n    addCase = (data) => {\n        let newCases = [...this.state.cases, data[\"addedCase\"]]\n        let newUserCases = [...this.state.userCases, data[\"firstAddedUserCase\"], data[\"secondAddedUserCase\"]]   \n        this.setState({cases: newCases, userCases: newUserCases})\n    }\n\n    removeCase = (removedCase) => {\n        let newCases = this.state.cases.filter(thisCase => thisCase.id !== removedCase.id)\n        let newUserCases = this.state.userCases.filter(userCase => userCase.case_id !== removedCase.id)\n        this.setState({cases: newCases, userCases: newUserCases})\n    }\n\n    render() {\n        return(\n            <div>\n                <Route exact path=\"/admin\" render={() => \n                    <AdminHome \n                        getServerInfo={this.getServerInfo} \n                        leads={this.state.leads} \n                        clients={this.state.clients} \n                        cases={this.state.cases}\n                    />\n                } />\n                <Route exact path=\"/admin/new-lead\" render={() => \n                    <NewLead addLead={this.addLead} />\n                } />\n                <Route exact path=\"/admin/new-case\" render={() => \n                    <NewCase addCase={this.addCase} clients={this.state.clients} />\n                } />\n                <Route path=\"/admin/leads\" render={() => \n                    <Leads \n                        leads={this.state.leads} \n                        removeLead={this.removeLead} \n                        addClient={this.addClient} \n                    />\n                } />\n                <Route path=\"/admin/clients\" render={() => \n                    <Clients \n                        clients={this.state.clients} \n                        cases={this.state.cases} \n                        userCases={this.state.userCases} \n                        addLead={this.addLead} \n                        removeClient={this.removeClient} \n                    />\n                } />\n                <Route path=\"/admin/cases\" render={() => \n                    <Cases \n                        cases={this.state.cases} \n                        clients={this.state.clients} \n                        userCases={this.state.userCases} \n                        sessions = {this.state.sessions} \n                        removeCase={this.removeCase}  \n                    />\n                } />\n            </div>\n        )\n    }\n}\n\nexport default AdminContainer","import React from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Route, NavLink, Redirect} from 'react-router-dom'\n// Cookies\nimport { withCookies } from 'react-cookie'\n// Public pages\nimport Home from \"./Components/PublicPages/Home.js\"\nimport WhatIsMediation from \"./Components/PublicPages/WhatIsMediation.js\"\nimport GetInTouch from \"./Components/PublicPages/GetInTouch.js\"\nimport ScheduleACall from \"./Components/PublicPages/ScheduleACall.js\"\nimport Login from \"./Components/PublicPages/Login.js\"\nimport YourCase from \"./Components/PublicPages/YourCase.js\"\n// Private pages\nimport AdminContainer from \"./Components/PrivatePages/AdminContainer.js\"\n// Semantic \nimport { Menu } from 'semantic-ui-react'\n// Alert provider\nimport { useAlert } from 'react-alert'\n\n\n\nfunction App(props) {\n  \n  const { cookies } = props\n  const alert = useAlert()\n\n  function setUser(user) {\n    cookies.set('id', user[\"id\"], { path: '/' })\n    cookies.set('accountType', user[\"account_type\"], { path: '/' })\n  }\n\n  function logout() {\n    cookies.remove('id')\n    cookies.remove('accountType')\n    alert.show(\"You have logged out\")\n  }\n\n  return (\n    <div >\n      <Router>\n        <Menu>  \n          <NavLink to=\"/\" exact> <Menu.Item>Homepage </Menu.Item></NavLink>\n          <NavLink to=\"/what-is-mediation\" exact><Menu.Item>What is mediation </Menu.Item></NavLink>\n          <NavLink to=\"/get-in-touch\" exact><Menu.Item>Get in touch</Menu.Item></NavLink>\n          <NavLink to=\"/schedule-a-call\" exact><Menu.Item>Schedule a call</Menu.Item></NavLink>\n          <NavLink to=\"/your-case\" exact><Menu.Item>Your case </Menu.Item></NavLink>\n          <NavLink to=\"/admin\" exact><Menu.Item>Admin</Menu.Item></NavLink>\n          <Menu.Menu position=\"right\">\n            {cookies.get('id') ?\n              <NavLink to=\"/login\" exact><Menu.Item onClick={logout}>Logout</Menu.Item></NavLink>\n              : \n              <NavLink to=\"/login\" exact><Menu.Item>Login </Menu.Item></NavLink>\n            }\n          </Menu.Menu>\n        </Menu>\n        <React.Fragment>\n          <Route exact path=\"/\" render={Home} />\n          <Route exact path=\"/what-is-mediation\" render={WhatIsMediation} />\n          <Route exact path=\"/get-in-touch\" render={() => <GetInTouch />} />\n          <Route exact path=\"/schedule-a-call\" render={() => <ScheduleACall />} />\n          <Route exact path=\"/login\" render={() => <Login setUser={setUser}/>} />\n          <Route path=\"/your-case\" render={() => { \n            if (cookies.get('accountType') === \"2\") {\n              return <YourCase cookies={props.cookies} />\n            } else {\n              return <Redirect to=\"/login\" />\n            }\n          }} />\n          <Route path=\"/admin\" render={() => { \n            if (cookies.get('accountType') === \"0\") {\n              return <AdminContainer cookies={props.cookies} />\n            } else {\n              return <Redirect to=\"/login\" />\n            }\n          }} />\n        </React.Fragment>\n      </Router>\n    </div>\n  )\n}\n\nexport default withCookies(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie'\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.TOP,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n\nReactDOM.render(\n  <CookiesProvider>\n    <React.StrictMode>\n      <AlertProvider template={AlertTemplate} {...options}>\n        <App /> \n      </AlertProvider>\n    </React.StrictMode>\n  </CookiesProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}